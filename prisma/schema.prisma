// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum status {
  ATIVO //Pessoas desaparecida
  ENCONTRADO // Pessoas foi encontrada
}

model Avistamento {
  id                   Int                @id @default(autoincrement())
  /**
   * Esta parte e para linkar com o id da tabela da pessoa desaparecida em si
   */
  pessoaDesaparecida   PessoaDesaparecida @relation("AvistamentoToPessoaDesaparecida", fields: [idPessoaDesaparecida], references: [id], onDelete: Cascade)
  userId               Int
  usuario              USER              @relation(fields: [userId], references: [id])
  idPessoaDesaparecida Int
  dataHora             DateTime           @default(now())
  comentario           String
  localAvistamento     String?
  latitude             Float?
  longitude            Float?
  nomeInformante       String?
  contatoInformante    String?
  dataCadastro         DateTime           @default(now()) @map("data_cadastro")
  dataAtualizacao      DateTime           @updatedAt @map("data_atualizacao")

  @@map("avistamentos")
}

model PessoaDesaparecida {
  id                  Int           @id @default(autoincrement())
  userId              Int
  usuario             USER         @relation(fields: [userId], references: [id])
  nome                String
  idade               Int
  dataDesaparecimento DateTime
  descricao           String?
  status              status        @default(ATIVO)
  dataCadastro        DateTime      @default(now()) @map("data_cadastro")
  dataAtualizacao     DateTime      @updatedAt @map("data_atualizacao")
  avistamentos        Avistamento[] @relation("AvistamentoToPessoaDesaparecida")

  @@map("pessoas_desaparecidas")
}

model Pessoa {
  id           String        @id @default(uuid())
  nome         String
  idade        Int
  email        String        @unique
  criadoEm     DateTime      @default(now())
  localizacoes Localizacao[]

  @@map("users")
}

model Contato {
  id       String   @id @default(uuid())
  userId   Int
  usuario  USER    @relation(fields: [userId], references: [id])
  nome     String
  email    String   @unique
  telefone String?
  mensagem String
  criadoEm DateTime @default(now())
}

model USER {
  id           Int    @id @default(autoincrement())
  nome         String
  email        String @unique
  senha_hash   String
  tipo_usuario String

  dataCadastro         DateTime             @default(now()) @map("data_cadastro")
  dataAtualizacao      DateTime             @updatedAt @map("data_atualizacao")
  pessoasDesaparecidas PessoaDesaparecida[]
  avistamentos         Avistamento[]
  contatos             Contato[]

  @@map("usuarios")
}

model Localizacao {
  id        String   @id @default(uuid())
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())
  pessoaId  String
  pessoa    Pessoa   @relation(fields: [pessoaId], references: [id])
}
